touch nombreArchivo.txt me crea archivo vacios
cat nombreArchivo.txt nos muestra el archivo por dentro
history  nos muestra el historico de comando que hemos puesto en la tar
git init - inicia la razi de los cambios de git 
git status - me dice que archivo he tocado y cuales son nuevos
git add . Agrega todos los cambios que git status nos dijo que faltaban
git rm nombreArchivo quita el add el archivo que agregamos
git rm --catched lo quita de los cambio de add .
git commit -m "mensaje" se guardar los cambios de un mensaje
git config --list muestra las configuraciones de git
git config --list --show-origin  nos dice la ruta
git config --global user.name "Juan Salazar Saenz"
git config --global user.email "Juan-0927cacd@hotmail.com"
git log nombreArchivo nos muestra todos los commit que le hemos hecho al archivo
git show nombreArchivo nos muestra los commit y sus cambios 
git log nombreArchivo no muestrs los commit
git diff consecutivo consecutivo2 nos muestra los cambios entre los dos cambios
git reset id cambio --hard fuerza a devolvernos al cambio
git reset id cambio --soft no elimina lo del commit
git diff me muestra las diferencias entre mis archivos actuales y el ultimo commit
git log --stat nos muestra los cambios de cada commit con relacion al anterior
git checkout id cambio nombreArchivo nos devuelve ese archivo a el cambio mensionado
git reset HEAD / elimina todo lo que hemos hecho y nos deja en el ultimo commit
git fetch trae cambio del servidor a repo local
git merge actualiza los acambio del repo local al directorio de trabajo
git pull = git fetch + git merge
git log --oneline:Te muestra el id commit y el título del commit.
git log --decorate: Te muestra donde se encuentra el head point en el log.
git log --stat: Explica el número de líneas que se cambiaron brevemente.
git log -p: Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog: Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd": Muestra mensajes personalizados de los commits.
git log -3: Limitamos el número de commits.
git log --after=“2018-1-2”
git log --after=“today” y
git log --after=“2018-1-2” --before=“today”: Commits para localizar por fechas.
git log --author=“Name Author”: Commits hechos por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE”: Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i: Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html: Busca los commits en un archivo en específico.
git log -S “Por contenido”: Buscar los commits con el contenido dentro del archivo.
git log > log.txt: guardar los logs en un archivo txt
git branch nombreRamaNueva
git show nos muestra los cambio a que rama esta apuntando
git checkout nombreRamaNueva
git checkout master para poder hacer el merge 
git branch me muestra las ramas existentes
git merge nombreRamaNueva -m "unificar cambios"
git remote -v me dice el origin de repositorio
git pull origin master nos trae todos los cambio de master a nuestra rama 
git pull origin master --allow-unrelated-histories integra todos los commmit a nuestras historias 
ssh-keygen -t rsa -b 4096 - C "Juan-0927cacd@hotmail.com" Creamos un ssh para nuestro usuario con el mismo correo de github
eval $(ssh-agent -s) Veritifacmos que el agente de ssh este activo
ssh-add ~/.ssh/id_rsa Agregamos nuestra llave privada a el agente de ssh
cat ~/.ssh/id_rsa.pub agregamos este archivo a github t ahora todo lo podemos trabjar por ssh
git log --all  no muestra el log de forma extendida
git log --all --graph nos muestra las ramas y como se han comportado de forma linda
git log --all --graph --oneline --decorate nos muestra las ramas y como se han comportado de forma linda y comprimida
alias arbolito"git log --all --graph --oneline --decorate" / creamos el alias para no escribir tanto
git tag nos sirve para ver los tags
git show-ref --tags nos muestra los tag y a que id de log corresponde
git tag -a nombreTag -m "como veo el nuevo tag" id / asi creamos el nuevo tag
git push origin --tags subimos los tags al repo
git tag -d nombreTag Eliminamos el tag pero no del repo
git push origin :refs/tags/nombreTag - Asi lo eliminamos del repo
git show-branch nos muestra los commit sobre cada rama
git show-branch --all nos muestra los commit sobre cada rama + comentarios que pusimos
gitk nos muestra en un frame de forma linda todo
git pull origin ramaNueva me trae la rama del repo
pull request solo sirve en github
fork es una ayuda a proyecto open source y tambiens olo sirve en gituhb
git remote add upstream + url / agregamos la rama origen de nuestro proyecto fork
git remote -v
git pull upstream master
.gitignore son los archivo que no quieres que vayan a tu repo
*.tipo archivo ahora todos los archivos de ese tipo no van a subir al repo
git rebase master / esto se hace desde la rama hija y todos los comiit quedan en la rama padre y la rama hija nunca existio
git rebase rama hija y lito podemos eliminar la rama creada
git stash pop / creacmos un codigo en memoria que no se ha entregado
git stash list  nos lista los stash / codigo en memoria que nunca se entrego
git stash branch nuevaramita / lo que no habia entregado me lo deja en una neuva rama
git stash drop elimina el codigo en memoria
git clean --dry-run / limpia archivo basura segun git
git clean -f borra los archivos que nos dijo en el run
git cherry-pick id / sobre la rama que quieras puedes devolverte a un commit x sin hacer revet
git reflog sirve para ver cuando metimos la pata y podernos devolver
git commit --amend me agrega lo ultimo que modifique al ultimo commit sin tener que ahcer otro commit
git grep palabra nos busca el texto en nuestro repo
git grep -n palabra nos busca el texto en nuestro repo y la linea en la que esta
git grep -c palabra nos cuenta la cantiadad de veces que usamos esa palabra
git log -S "palarba en el commit" y nos muestra los commit donde el mensaje tuvo esa palabra
git shortlog -sn nos dice la cantidad de commit por persona
git shortlog -sn --all nos dice la cantidad de commit por persona hasta los que se borraron
git shortlog -sn --all --no-merges nos dice la cantidad de commit por persona hasta los que se borraron y elimina los merge que no valen
git config --global alias.stats "git shortlog -sn --all --no-merges" crea alias con antelacion del git
git blame archivo.txt no miuestra quien creo cada linea
git blame -c archivo.txt no miuestra quien creo cada linea
git blame --help funciona para saber que hace cada comando
git blame archivo.txt -l35,53 buscamos por lineas en especifico 
git branch -r podemos ver las ramas remotas que estan en el servidor
git branch -a podemos ver todas las ramas 